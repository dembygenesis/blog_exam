package mysql

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"github.com/dembygenesis/blog_exam/pkg/models"
	"github.com/dembygenesis/blog_exam/pkg/models_autogenerated"
	_ "github.com/go-sql-driver/mysql"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

// Create inserts a new article
func (a *Article) Create(article models.Article) (*models.ArticleId, error) {
	fmt.Println("Reached")
	boilCtx := boil.WithDebug(context.Background(), true)
	hasExisting := false
	// Prep
	article.TrimSpaces()

	// Check for existing entries
	exists, err := models_autogenerated.Articles(
		qm.Where("author = ?", article.Author),
		qm.Where("title = ?", article.Title),
	).All(boilCtx, a.conn)
	if err != nil {
		if !errors.Is(err, sql.ErrNoRows) {
			return nil, fmt.Errorf("error trying to validate the article being added: %v", err.Error())
		}
		if len(exists)  == 1 {
			hasExisting = true
		}
	}
	if hasExisting {
		return nil, errors.New("error: record already exists")
	}

	// Insert
	entry := models_autogenerated.Article{
		Title:   article.Title,
		Content: article.Content,
		Author:  article.Author,
	}
	err = entry.Insert(boilCtx, a.conn, boil.Infer())
	if err != nil {
		return nil, fmt.Errorf("error trying to insert a new entry: %v", err.Error())
	}

	// Return
	return &models.ArticleId{Id: entry.ID}, nil
}

func getReadFiler(id int) qm.QueryMod {
	if id != 0 {
		return qm.Where("id = ?", id)
	}
	return qm.Where("true")
}


func (a *Article) Read(id int) (*models_autogenerated.ArticleSlice, error) {
	boilCtx := boil.WithDebug(context.Background(), true)
	articles, err := models_autogenerated.Articles(getReadFiler(id)).All(boilCtx, a.conn)
	if err != nil {
		return nil, err
	}
	if len(articles) == 0 {
		return &models_autogenerated.ArticleSlice{}, nil
	}
	return &articles, nil
}
